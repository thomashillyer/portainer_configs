version: "3"
services:
  homeassistant:
    container_name: homeassistant
    hostname: HomeAssistant
    image: "homeassistant/home-assistant"
    volumes:
      - homeassistant_data:/config
      - /etc/localtime:/etc/localtime:ro
      - /etc/letsencrypt:/config/letsencrypt/:ro
      - /dev/bus/usb:/dev/bus/usb
    restart: unless-stopped
    privileged: true
    group_add:
      - "1001"
    networks:
      macvlan:
        ipv4_address: 10.0.1.3 # this IP will show as a device on your router
      vlan_bridge:
        ipv4_address: 10.0.10.3 # same as macvlan (.3) and use "vlan bridge subnet" (10)

  esphome:
    container_name: esphome
    image: esphome/esphome:latest
    volumes:
      - esphome_config:/config
      - homeassistant_data:/config/workspace
      - /etc/localtime:/etc/localtime:ro
      - /dev/bus/usb:/dev/bus/usb
    ports:
      - 6052:6052
    restart: unless-stopped
    group_add:
      - "1001"
    privileged: true
    networks:
      macvlan:
        ipv4_address: 10.0.1.7 # this IP will show as a device on your router
      vlan_bridge:
        ipv4_address: 10.0.10.7 # same as macvlan (.7) and use "vlan bridge subnet" (10)
        
  duplicati:
    container_name: duplicati
    image: duplicati/duplicati
    restart: unless-stopped
    ports:
      - "8200:8200/tcp"
    volumes:
      - duplicati_data:/data
      - duplicati_backups:/backups
      - homeassistant_data:/source/homeassistant
      - nodered_data:/source/nodered
      - /etc/localtime:/etc/localtime:ro
    group_add:
      - "1001"
    networks:
      macvlan:
        ipv4_address: 10.0.1.13 # this IP will show as a device on your router
      vlan_bridge:
        ipv4_address: 10.0.10.13 # same as macvlan (.13) and use "vlan bridge subnet" (10)
  
  # vscode:
  #   container_name: vscode
  #   image: linuxserver/code-server:latest
  #   restart: unless-stopped
  #   volumes:
  #     - homeassistant_data:/config/workspace
  #     - vscode_config:/config
  #     - /etc/letsencrypt:/config/letsencrypt/:ro
  #   ports:
  #     - 8443:8443
  #   environment:
  #     - "PASSWORD=${VSCODE_PASSWORD}"
  #     - "SUDO_PASSWORD=${VSCODE_SUDOPASSWORD}"
  #     #- PUID=1011
  #     - PGID=1001
  #     - DEFAULT_WORKSPACE=/config/workspace
  #     - CERT=/config/letsencrypt/live/thomashillyer.com/fullchain.pem
  #     - CERT_KEY=/config/letsencrypt/live/thomashillyer.com/privkey.pem
  #     - BIND_ADDR=https://storage.thomashillyer.com:8443
  #   privileged: true
  #   network_mode: host
    
  mqtt:
    container_name: mqtt
    restart: unless-stopped
    image: eclipse-mosquitto:latest
    volumes:
        - mosquitto_config:/mosquitto/config
        - mosquitto_log:/mosquitto/log
        - mosquitto_data:/mosquitto/data
        - /etc/localtime:/etc/localtime:ro
    privileged: true
    group_add:
      - "1001"
    #network_mode: host
    ports:
      - 1883:1883
      - 8883:8883
    networks:
      macvlan:
        ipv4_address: 10.0.1.6 # this IP will show as a device on your router
      vlan_bridge:
        ipv4_address: 10.0.10.6 # same as macvlan (.6) and use "vlan bridge subnet" (10)

  nodered:
    container_name: nodered
    restart: unless-stopped
    image: nodered/node-red
    ports:
      - 1880:1880
    group_add:
      - "1001"
    volumes:
      - nodered_data:/data
    networks:
      macvlan:
        ipv4_address: 10.0.1.12
      vlan_bridge:
        ipv4_address: 10.0.10.12
  scrypted:
    # environment:
        # Scrypted NVR Storage (Part 2 of 3)

        # Uncomment the next line to configure the NVR plugin to store recordings
        # use the /nvr directory within the container. This can also be configured
        # within the plugin manually.
        # The drive or network share will ALSO need to be configured in the volumes
        # section below.
        # - SCRYPTED_NVR_VOLUME=/nvr

        # - SCRYPTED_WEBHOOK_UPDATE_AUTHORIZATION=Bearer SET_THIS_TO_SOME_RANDOM_TEXT
        # - SCRYPTED_WEBHOOK_UPDATE=http://localhost:10444/v1/update

        # Uncomment next 3 lines for Nvidia GPU support.
        # - NVIDIA_VISIBLE_DEVICES=all
        # - NVIDIA_DRIVER_CAPABILITIES=all

        # Uncomment next line to run avahi-daemon inside the container
        # Don't use if dbus and avahi run on the host and are bind-mounted
        # (see below under "volumes")
        # - SCRYPTED_DOCKER_AVAHI=true
    # runtime: nvidia

    volumes:
        # Scrypted NVR Storage (Part 3 of 3)

        # Modify to add the additional volume for Scrypted NVR.
        # The following example would mount the /mnt/sda/video path on the host
        # to the /nvr path inside the docker container.
        # - /mnt/media/video:/nvr

        # Or use a network mount from one of the CIFS/NFS examples at the top of this file.
        # - type: volume
        #   source: nvr
        #   target: /nvr
        #   volume:
        #     nocopy: true

        # uncomment the following lines to expose Avahi, an mDNS advertiser.
        # make sure Avahi is running on the host machine, otherwise this will not work.
        # not compatible with Avahi enabled via SCRYPTED_DOCKER_AVAHI=true
        # - /var/run/dbus:/var/run/dbus
        # - /var/run/avahi-daemon/socket:/var/run/avahi-daemon/socket

        # Default volume for the Scrypted database. Typically should not be changed.
        - ~/.scrypted/volume:/server/volume
    devices: [
        # uncomment the common systems devices to pass
        # them through to docker.

        # all usb devices, such as coral tpu
        # "/dev/bus/usb:/dev/bus/usb",

        # hardware accelerated video decoding, opencl, etc.
        # "/dev/dri:/dev/dri",

        # uncomment below as necessary.
        # zwave usb serial device

        # "/dev/ttyACM0:/dev/ttyACM0",

        # coral PCI devices
        # "/dev/apex_0:/dev/apex_0",
        # "/dev/apex_1:/dev/apex_1",
    ]

    container_name: scrypted
    restart: unless-stopped
    network_mode: host
    image: koush/scrypted

    # logging is noisy and will unnecessarily wear on flash storage.
    # scrypted has per device in memory logging that is preferred.
    logging:
        driver: "json-file"
        options:
            max-size: "10m"
            max-file: "10"

#  wyze-bridge:
#    container_name: wyze-bridge
#    restart: unless-stopped
#    image: mrlt8/wyze-bridge:latest
#    ports:
#      - 1935:1935 # RTMP
#      - 8554:8554 # RTSP
#      - 8888:8888 # HLS
#      - 5000:5000 # WEB-UI
#    environment:
#      - "WYZE_EMAIL=${WYZE_USER}" 
#      - "WYZE_PASSWORD=${WYZE_PASSWORD}"
#      - RTSP_READTIMEOUT=15

# Here we define what networks are available to use by the services above
# Make sure to set the config of both macvlan and vlan_bridge as described in the guide.
networks:
  macvlan:
    name: docker_macvlan
    external: true # created in infra_compose.yml
    driver: macvlan
    enable_ipv6: false
    driver_opts:
      parent: eth0
    ipam:
      config:
        - subnet: 10.0.1.0/24 # Set to same subnet as your router and other devices
          ip_range: 10.0.1.10/27 # Available range from 192-224
          gateway: 10.0.1.1 # This is your router IP

  vlan_bridge:
    name: docker_vlan_bridge
    external: true # created in infra_compose.yml
    driver: bridge
    enable_ipv6: false
    ipam:
      config:
        - subnet: 10.0.10.0/24 # subnet for all containers 
          ip_range: 10.0.10.10/27 # for easier use, set to same range as under macvlan (192 to 224 here)
          gateway: 10.0.10.1 # for easier use, set to same last number as your router (1)

# Here we define where to save the files that live outside the container
# Located under /var/lib/docker/volumes
volumes:
  homeassistant_data:
    name: homeassistant_data
  esphome_config:
    name: esphome_config
  mosquitto_data:
    name: mosquitto_data
  mosquitto_config:
    name: mosquitto_config
  mosquitto_log:
    name: mosquitto_log
  nodered_data:
    name: nodered_data
  duplicati_data:
    name: duplicati_data
  duplicati_backups:
    name: duplicati_backups
  # vscode_config:
  #   external: true
  #   name: vscode_config
